{
	"info": {
		"_postman_id": "41b37d93-7b99-4132-9f87-ce88b789c1b3",
		"name": "Not used atm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34617096"
	},
	"item": [
		{
			"name": "Create comments as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"\r",
							"// Get the current comment\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Replace the comment name in the property commentId with actual id of the comment\r",
							"    let productWithMatchingName = testData.products.find(product => {\r",
							"        return product.name == comment.productId\r",
							"    });\r",
							"\r",
							"    // Change the commentId property of the comment to the id of the matching comment\r",
							"    comment.productId = productWithMatchingName.id;\r",
							"\r",
							"    // Save changes to our test data (the new value of commentId)\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"// pm variables have a scope of one request\r",
							"// setting two variables used in the body\r",
							"pm.variables.set(\"comment\", comment.comment);\r",
							"pm.variables.set(\"userId\", comment.userId);\r",
							"pm.variables.set(\"productId\", comment.productId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data\r",
							"let testData = pm.collectionVariables.get(\"testData\");\r",
							"// Get the current comment\r",
							"let comment = testData.comments[testData.counter];\r",
							"\r",
							"// Read the response\r",
							"let response = pm.response;\r",
							"// Read the response data\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// Test that we get a 405 code (Not Allowed) back\r",
							"pm.test(\"We should get an Not Allowed (code 405) back\",()=> {\r",
							"    pm.expect(response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"\r",
							"// Update the counter and save the updated test data\r",
							"// (also including the id we set in the second test)\r",
							"testData.counter++;\r",
							"pm.collectionVariables.set(\"testData\",testData);\r",
							"\r",
							"// If there are more comments - then \"loop\"\r",
							"// through them using setNextRequest\r",
							"if(testData.comments[testData.counter]){\r",
							"    pm.execution.setNextRequest(\"Create comments as User\");\r",
							"}\r",
							"// Otherwise console.log \"All done\"\r",
							"else {\r",
							"    console.log(\"All comments have been created.\");\r",
							"    // IMPORTANT: Set counter to 0 in preparation of next request\r",
							"    testData.counter = 0;\r",
							"    pm.collectionVariables.set(\"testData\",testData);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"comment\": \"{{comment}}\",\r\n    \"userId\": {{userId}},\r\n    \"productId\": {{productId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change comments as User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current comment",
							"let comment = testData.comments[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 405 code (Not Allowed) back",
							"pm.test(\"We should get an Not Allowed (code 405) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more comments - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.comments[testData.counter]){",
							"    pm.execution.setNextRequest(\"Change comments as User\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All comments have been changed.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current comment",
							"let comment = testData.comments[testData.counter];",
							"",
							"// Change the description and save to collectionVariables",
							"comment.comment += \" Some extra text in the description.\";",
							"pm.collectionVariables.set(\"testData\", testData);",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", comment.id); ",
							"",
							"// Set a pm variable to description (it is used in the request body)",
							"pm.variables.set(\"comment\", comment.comment);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"{{comment}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete comments as User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// Test that affected rows equals 1",
							"pm.test(\"Expect rowsAffected to equal 1\", () => {",
							"    pm.expect(responseData.rowsAffected).to.equal(1);",
							"});",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more categories - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.products[testData.counter]){",
							"    pm.execution.setNextRequest(\"Delete products as User\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All categories have been deleted correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current category",
							"let product = testData.products[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", product.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comments as User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current comment",
							"let comment = testData.comments[testData.counter];",
							"",
							"// Set a pm variable to id (it is used in the request url)",
							"pm.variables.set(\"id\", comment.id); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the test data",
							"let testData = pm.collectionVariables.get(\"testData\");",
							"// Get the current comment",
							"let comment = testData.comments[testData.counter];",
							"",
							"// Read the response",
							"let response = pm.response;",
							"// Read the response data",
							"let responseData = pm.response.json();",
							"",
							"// Test that we get a 200 code (ok request) back",
							"pm.test(\"We should get an ok (code 200) back\",()=> {",
							"    pm.expect(response.code).to.equal(200);",
							"});",
							"",
							"// // Test that the REST-api returns the sama data",
							"// // as our test data for the comment",
							"// pm.test(\"Test that the correct comment data is returned\", ()=> {",
							"//   console.log(\"comment\", comment);",
							"//   console.log(\"responseData\", responseData);",
							"//   pm.expect(comment).to.deep.equal(responseData); ",
							"// });",
							"",
							"// Update the counter and save the updated test data",
							"testData.counter++;",
							"pm.collectionVariables.set(\"testData\",testData);",
							"",
							"// If there are more comments - then \"loop\"",
							"// through them using setNextRequest",
							"if(testData.comments[testData.counter]){",
							"    pm.execution.setNextRequest(\"Get comments as User\");",
							"}",
							"// Otherwise console.log \"All done\"",
							"else {",
							"    console.log(\"All comments have been read correctly.\");",
							"    // IMPORTANT: Set counter to 0 in preparation of next request",
							"    testData.counter = 0;",
							"    pm.collectionVariables.set(\"testData\",testData);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/comments/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"comments",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}